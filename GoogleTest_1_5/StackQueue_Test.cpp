// GoogleTestのヘッダ
#include <gtest/gtest.h>

// 自身のリスト
#include "../1_5/Stack.h"
#include "../1_5/Queue.h"


namespace ex01_DataStructure
{
	namespace chapter5
	{
		/// @brief テストに使用する、格納要素
		struct UserData
		{
			int		_Age;
			float	_Stature;

			UserData() : _Age(0), _Stature(0.0f) {}

			UserData(int age, float stature)
				: _Age(age), _Stature(stature) {}

			bool operator==(const UserData& other) const
			{
				return this->_Age == other._Age && this->_Stature == other._Stature;
			}
		};

		//=================================== スタック - データ数の取得 ===================================
		namespace stack_GetDataNumTest
		{
			/**********************************************************************************//**
				@brief		リストが空である場合の実行テスト
				@details	ID:スタック-0\n
							データ数の取得機能のテストです。\n
							リストが空である場合の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(StackGetDataNumTest, TestGetDataNumWhenEmpty) {

				Stack<UserData> stack;

				EXPECT_EQ(0, stack.Size()) << "想定しているサイズと異なる";
			}

			/**********************************************************************************//**
				@brief		要素をプッシュした際の実行テスト	
				@details	ID:スタック-1\n
							データ数の取得機能のテストです。\n
							要素をプッシュした後の挙動を確認しています。\n
							戻り値が1であれば成功です。\n
			*//***********************************************************************************/
			TEST(StackGetDataNumTest, TestGetDataNumAfterPush) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "初期要素の追加に失敗";

				EXPECT_EQ(1, stack.Size()) << "想定しているサイズと異なる";
			}

			/**********************************************************************************//**
				@brief		要素をポップした際の実行テスト	
				@details	ID:スタック-2\n
							データ数の取得機能のテストです。\n
							要素をポップした後の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(StackGetDataNumTest, TestGetDataNumAfterPop) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "初期要素の追加に失敗";

				UserData tUserData;
				ASSERT_TRUE(stack.Pop(tUserData)) << "要素のポップに失敗";

				EXPECT_EQ(0, stack.Size()) << "想定しているサイズと異なる";
			}

			/**********************************************************************************//**
				@brief		要素のプッシュに失敗した際の実行テスト	
				@details	ID:スタック-3\n
							データ数の取得機能のテストです。\n
							要素のプッシュに失敗した際の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(StackGetDataNumTest, TestGetDataNumAfterPushFailed) {

				Stack<UserData> stack;

				ASSERT_FALSE(stack.Push(UserData(1, 10.0f))) << "失敗するはずのプッシュに成功してしまった";

				EXPECT_EQ(0, stack.Size()) << "想定しているサイズと異なる";
			}

			/**********************************************************************************//**
				@brief		プッシュを2回行った際の実行テスト	
				@details	ID:スタック-4\n
							データ数の取得機能のテストです。\n
							要素のプッシュを2回行った際の挙動を確認しています。\n
							戻り値が2であれば成功です。\n
			*//***********************************************************************************/
			TEST(StackGetDataNumTest, TestGetDataNumAfterTwoPush) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "初期要素の追加に失敗";
				ASSERT_TRUE(stack.Push(UserData(2, 20.0f))) << "初期要素の追加に失敗";

				EXPECT_EQ(2, stack.Size()) << "想定しているサイズと異なる";
			}

			/**********************************************************************************//**
				@brief		プッシュを2回、ポップを1回行った際の実行テスト	
				@details	ID:スタック-5\n
							データ数の取得機能のテストです。\n
							要素のプッシュを2回、ポップを1回行った際の挙動を確認しています。\n
							戻り値が1であれば成功です。\n
			*//***********************************************************************************/
			TEST(StackGetDataNumTest, TestGetDataNumAfterTwoPushAndOnePop) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "初期要素の追加に失敗";
				ASSERT_TRUE(stack.Push(UserData(2, 20.0f))) << "初期要素の追加に失敗";
				
				UserData tUserData;
				ASSERT_TRUE(stack.Pop(tUserData)) << "初期要素のポップに失敗";

				EXPECT_EQ(1, stack.Size()) << "想定しているサイズと異なる";
			}

			/**********************************************************************************//**
				@brief		リストが空である場合に、ポップを行った際の実行テスト	
				@details	ID:スタック-6\n
							データ数の取得機能のテストです。\n
							空のリストに対してポップを行った際の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(StackGetDataNumTest, TestGetDataNumAfterPopEmpty) {

				Stack<UserData> stack;

				UserData tUserData;
				ASSERT_FALSE(stack.Pop(tUserData)) << "失敗するはずのポップに成功してしまった";

				EXPECT_EQ(0, stack.Size()) << "想定しているサイズと異なる";
			}

		}

		//=================================== スタック - プッシュ ===================================
		namespace stack_PushTest
		{
			/**********************************************************************************//**
				@brief		リストが空である場合の実行テスト
				@details	ID:スタック-8\n
							データのプッシュ機能のテストです。\n
							リストが空である場合の挙動を確認しています。\n
							戻り値がTRUEかつ、リストに要素が追加されれば成功です。\n
			*//***********************************************************************************/
			TEST(StackPushTest, TestPushWhenEmpty) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "要素の追加に失敗";
				EXPECT_EQ(1, stack.Size()) << "追加されたはずの要素が正常に追加できていない";
			}

			/**********************************************************************************//**
				@brief		リストに複数の要素がある場合の実行テスト
				@details	ID:スタック-9\n
							データのプッシュ機能のテストです。\n
							リスト複数の要素がある場合の挙動を確認しています。\n
							戻り値がTRUEかつ、リストの末尾に要素が追加されれば成功です。\n
			*//***********************************************************************************/
			TEST(StackPushTest, TestPushWhenMultiElem) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "初期要素の追加に失敗";
				ASSERT_TRUE(stack.Push(UserData(2, 20.0f))) << "初期要素の追加に失敗";

				ASSERT_TRUE(stack.Push(UserData(3, 30.0f))) << "複数要素がある状態での、要素の追加に失敗";

				UserData tUserData;
				ASSERT_TRUE(stack.Pop(tUserData)) << "要素のポップに失敗";

				EXPECT_EQ(UserData(3, 30.0f), tUserData) << "リストの末尾に対して、要素を正常にプッシュできていなかった";

			}

		}

		//=================================== スタック - ポップ ===================================
		namespace stack_PopTest
		{
			/**********************************************************************************//**
				@brief		リストが空である場合の実行テスト
				@details	ID:スタック-11\n
							データのポップ機能のテストです。\n
							リストが空である場合の挙動を確認しています。\n
							戻り値がFALSEであれば成功です。\n
			*//***********************************************************************************/
			TEST(StackPopTest, TestPopWhenEmpty) {

				Stack<UserData> stack;

				UserData tUserData;
				EXPECT_FALSE(stack.Pop(tUserData)) << "失敗するはずのポップに成功してしまった";
			}

			/**********************************************************************************//**
				@brief		リストに複数の要素がある場合の実行テスト
				@details	ID:スタック-12\n
							データのポップ機能のテストです。\n
							リストに複数の要素がある場合の挙動を確認しています。\n
							戻り値がTRUEかつ、末尾要素が引数で渡され、要素が削除されていれば成功です。\n
			*//***********************************************************************************/
			TEST(StackPopTest, TestPopWhenMultiElem) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "初期要素の追加に失敗";
				ASSERT_TRUE(stack.Push(UserData(2, 20.0f))) << "初期要素の追加に失敗";

				UserData tUserData;
				ASSERT_TRUE(stack.Pop(tUserData)) << "要素のポップに失敗";
				EXPECT_EQ(UserData(2, 20.0f), tUserData) << "ポップされた要素が、想定しているものと異なる";
				EXPECT_EQ(1, stack.Size()) << "リストから要素が削除できていない";
			}

			/**********************************************************************************//**
				@brief		リストに複数の要素がある場合の複数回実行テスト
				@details	ID:スタック-13\n
							データのポップ機能のテストです。\n
							リストに複数の要素がある場合に、複数回ポップした際の挙動を確認しています。\n
							戻り値がTRUEかつ、末尾要素から順に引数で渡されていれば成功です。\n
			*//***********************************************************************************/
			TEST(StackPopTest, TestMultiPopWhenMultiElem) {

				Stack<UserData> stack;

				ASSERT_TRUE(stack.Push(UserData(1, 10.0f))) << "初期要素の追加に失敗";
				ASSERT_TRUE(stack.Push(UserData(2, 20.0f))) << "初期要素の追加に失敗";

				UserData tUserData;
				ASSERT_TRUE(stack.Pop(tUserData)) << "要素のポップに失敗";
				EXPECT_EQ(UserData(2, 20.0f), tUserData) << "ポップされた要素が、想定しているものと異なる";
				ASSERT_TRUE(stack.Pop(tUserData)) << "要素のポップに失敗";
				EXPECT_EQ(UserData(1, 10.0f), tUserData) << "ポップされた要素が、想定しているものと異なる";

				EXPECT_EQ(0, stack.Size()) << "リストから要素が削除できていない";
			}

		}

		//=================================== キュー - データ数の取得 ===================================
		namespace queue_GetDataNumTest
		{
			/**********************************************************************************//**
				@brief		リストが空である場合の実行テスト
				@details	ID:キュー-0\n
							データ数の取得機能のテストです。\n
							リストが空である場合の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(QueueGetDataNumTest, TestGetDataNumWhenEmpty) {

			}

			/**********************************************************************************//**
				@brief		要素をプッシュした際の実行テスト
				@details	ID:キュー-1\n
							データ数の取得機能のテストです。\n
							要素をプッシュした後の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(QueueGetDataNumTest, TestGetDataNumAfterPush) {

			}

			/**********************************************************************************//**
				@brief		要素をポップした際の実行テスト
				@details	ID:キュー-2\n
							データ数の取得機能のテストです。\n
							要素をポップした後の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(QueueGetDataNumTest, TestGetDataNumAfterPop) {

			}

			/**********************************************************************************//**
				@brief		要素のプッシュに失敗した際の実行テスト
				@details	ID:キュー-3\n
							データ数の取得機能のテストです。\n
							要素のプッシュに失敗した際の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(QueueGetDataNumTest, TestGetDataNumAfterPushFailed) {

			}

			/**********************************************************************************//**
				@brief		プッシュを2回行った際の実行テスト
				@details	ID:キュー-4\n
							データ数の取得機能のテストです。\n
							要素のプッシュを2回行った際の挙動を確認しています。\n
							戻り値が2であれば成功です。\n
			*//***********************************************************************************/
			TEST(QueueGetDataNumTest, TestGetDataNumAfterTwoPush) {

			}

			/**********************************************************************************//**
				@brief		プッシュを2回、ポップを1回行った際の実行テスト
				@details	ID:キュー-5\n
							データ数の取得機能のテストです。\n
							要素のプッシュを2回、ポップを1回行った際の挙動を確認しています。\n
							戻り値が1であれば成功です。\n
			*//***********************************************************************************/
			TEST(QueueGetDataNumTest, TestGetDataNumAfterTwoPushAndOnePop) {

			}

			/**********************************************************************************//**
				@brief		リストが空である場合に、ポップを行った際の実行テスト
				@details	ID:キュー-6\n
							データ数の取得機能のテストです。\n
							空のリストに対してポップを行った際の挙動を確認しています。\n
							戻り値が0であれば成功です。\n
			*//***********************************************************************************/
			TEST(QueueGetDataNumTest, TestGetDataNumAfterPopEmpty) {

			}

		}

		//=================================== キュー - プッシュ ===================================
		namespace queue_PushTest
		{
			/**********************************************************************************//**
				@brief		リストが空である場合の実行テスト
				@details	ID:キュー-8\n
							データのプッシュ機能のテストです。\n
							リストが空である場合の挙動を確認しています。\n
							戻り値がTRUEかつ、リストに要素が追加されれば成功です。\n
			*//***********************************************************************************/
			TEST(QueuePushTest, TestPushWhenEmpty) {

			}

			/**********************************************************************************//**
				@brief		リストに複数の要素がある場合の実行テスト
				@details	ID:キュー-9\n
							データのプッシュ機能のテストです。\n
							リスト複数の要素がある場合の挙動を確認しています。\n
							戻り値がTRUEかつ、リストの末尾に要素が追加されれば成功です。\n
			*//***********************************************************************************/
			TEST(QueuePushTest, TestPushWhenMultiElem) {

			}

		}

		//=================================== キュー - ポップ ===================================
		namespace queue_PopTest
		{
			/**********************************************************************************//**
				@brief		リストが空である場合の実行テスト
				@details	ID:キュー-11\n
							データのポップ機能のテストです。\n
							リストが空である場合の挙動を確認しています。\n
							戻り値がFALSEであれば成功です。\n
			*//***********************************************************************************/
			TEST(QueuePopTest, TestPopWhenEmpty) {

			}

			/**********************************************************************************//**
				@brief		リストに複数の要素がある場合の実行テスト
				@details	ID:キュー-12\n
							データのポップ機能のテストです。\n
							リストに複数の要素がある場合の挙動を確認しています。\n
							戻り値がTRUEかつ、末尾要素が引数で渡され、要素が削除されていれば成功です。\n
			*//***********************************************************************************/
			TEST(QueuePopTest, TestPopWhenMultiElem) {

			}

			/**********************************************************************************//**
				@brief		リストに複数の要素がある場合の複数回実行テスト
				@details	ID:キュー-13\n
							データのポップ機能のテストです。\n
							リストに複数の要素がある場合に、複数回ポップした際の挙動を確認しています。\n
							戻り値がTRUEかつ、末尾要素から順に引数で渡されていれば成功です。\n
			*//***********************************************************************************/
			TEST(QueuePopTest, TestMultiPopWhenMultiElem) {

			}

		}
		
	}
}