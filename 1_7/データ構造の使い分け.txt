1. 寿命管理されるタスクの順次更新処理を行いたい
解答：リスト
理由：	前提として、同時に存在するインスタンス数が不確定のため、可変長配列の形を取らなければならない。
		また、格納されているインスタンスがどの順序で寿命をむかえるかも不定のため、どの位置のインスタンスも自由に
		削除することができる「リスト」が最適。

2. 連番のIDをキーとして要素を取得したい
解答：配列
理由：	データの検索を高速に行えるのはハッシュテーブルだが、
		数値の範囲が既知かつ符号なし整数であるため、IDをそのまま配列の添字としてランダムアクセスが可能である。
		そのため、「配列」を使用するのが最適。

3. ランダムなIDをキーとして要素を取得したい
解答：ハッシュテーブル
理由：	IDは符号なし整数値だが、数値の範囲が不定のため配列は利用できない。
		ハッシュ関数を用いて既知の範囲の数値に加工したうえで格納でき、
		ハッシュ値による高速な検索も可能な「ハッシュテーブル」が最適。

4. 派生クラスを順次実行したい
解答：キュー
理由：	登録順に順次実行かつ、一度きりのため、
		追加した順に要素を取り出す事ができる「キュー」が最適。

5. バイナリ内に格納された数式の解析器を作成したい
解答：スタック
理由：	逆ポーランド記法で表現された数式は、格納順の逆順に取り出すことで
		行うべき演算の種類を特定できるようになっているため、
		格納順と逆順に要素を取り出すことができる「スタック」が最適。
